{
  "contractName": "TokenStream",
  "constructorInputs": [
    {
      "name": "recipient",
      "type": "bytes20"
    },
    {
      "name": "funder",
      "type": "bytes20"
    },
    {
      "name": "pledgePerBlock",
      "type": "int"
    },
    {
      "name": "initialBlock",
      "type": "bytes4"
    }
  ],
  "abi": [
    {
      "name": "receive",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        },
        {
          "name": "pledge",
          "type": "int"
        }
      ]
    },
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    }
  ],
  "bytecode": "OP_4 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_5 OP_PICK 69 OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_4 OP_SPLIT OP_DROP OP_11 OP_ROLL OP_11 OP_ROLL OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_13 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY OP_7 OP_ROLL OP_BIN2NUM OP_DUP OP_CHECKLOCKTIMEVERIFY OP_DROP OP_OVER OP_BIN2NUM OP_SWAP OP_SUB OP_9 OP_PICK OP_OVER OP_DIV OP_8 OP_ROLL OP_NUMEQUALVERIFY OP_8 OP_PICK OP_SWAP OP_MOD OP_0 OP_NUMEQUALVERIFY OP_4 OP_SWAP OP_CAT OP_3 OP_ROLL OP_5 OP_SPLIT OP_NIP OP_CAT e803 OP_7 OP_PICK OP_8 OP_NUM2BIN OP_4 OP_ROLL OP_BIN2NUM OP_8 OP_ROLL OP_SUB OP_ROT OP_SUB OP_8 OP_NUM2BIN OP_SWAP 1976a914 OP_CAT OP_4 OP_ROLL OP_CAT 88ac OP_CAT OP_SWAP 17a914 OP_CAT OP_ROT OP_HASH160 OP_CAT 87 OP_CAT OP_CAT OP_HASH256 OP_EQUAL OP_NIP OP_NIP OP_ELSE OP_4 OP_ROLL OP_1 OP_NUMEQUALVERIFY OP_4 OP_PICK OP_HASH160 OP_ROT OP_EQUALVERIFY OP_4 OP_ROLL OP_4 OP_ROLL OP_CHECKSIG OP_NIP OP_NIP OP_NIP OP_ENDIF",
  "source": "pragma cashscript ^0.5.0;\n\ncontract TokenStream(\n    bytes20 recipient,\n    bytes20 funder,\n    int pledgePerBlock,\n    bytes4 initialBlock,\n) {\n    function receive(pubkey pk, sig s, int pledge) {\n        require(checkSig(s, pk));\n\n        int initial = int(initialBlock);\n        require(tx.time >= initial);\n\n        // Pledge amount calculation is done in client, verified in contract\n        // because multiplication is disabled in Bitcoin Script.\n        // We do an extra modulo check to verify correctness of the division\n        int passedBlocks = int(tx.locktime) - initial;\n        require(pledge / passedBlocks == pledgePerBlock);\n        require(pledge % passedBlocks == 0);\n\n        // Cut out old initialBlock (OP_PUSHBYTES_4 <initialBlock>)\n        // Insert new initialBlock (OP_PUSHBYTES_4 <tx.locktime>)\n        // Note that constructor parameters are added in reverse order,\n        // so initialBlock is actually the first statement in the contract bytecode.\n        bytes newContract = 0x04 + tx.locktime + tx.bytecode.split(5)[1];\n\n        // Create and enforce outputs\n        int minerFee = 1000; // hardcoded fee\n        bytes8 amount1 = bytes8(pledge);\n        bytes8 amount2 = bytes8(int(bytes(tx.value)) - pledge - minerFee);\n        bytes34 out1 = new OutputP2PKH(amount1, recipient);\n        bytes32 out2 = new OutputP2SH(amount2, hash160(newContract));\n        require(hash256(out1 + out2) == tx.hashOutputs);\n    }\n\n    function reclaim(pubkey pk, sig s) {\n        require(hash160(pk) == funder);\n        require(checkSig(s, pk));\n    }\n}\n",
  "compiler": {
    "name": "cashc",
    "version": "0.5.7"
  },
  "updatedAt": "2021-01-18T21:05:48.087Z"
}